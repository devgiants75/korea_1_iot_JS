//! 자바스크립트 주석

/*
! 자바스크립트 소개

  - html
    : 웹 콘텐츠를 구성하고 의미를 부여하는 데
      사용하는 마크업 언어
    ? 역할: 웹 페이지의 기본적인 뼈대를 구성하며, 텍스트, 이미지, 링크 등의 웹 콘텐츠를 사용자에게 표현하는 기능
  - css
    : HTML 콘텐츠에 스타일을 적용하는 데 
      사용하는 스타일 규칙 언어
    ? 역할: 웹 페이지의 레이아웃, 색상, 글꼴 및 시각적 요소를 조정하여 사용자 인터페이스의 외관을 개선

  - javaScript
    : 서버나 웹에서 작동하는 프로그램을 만드는 등
      웹의 모든 부분을 다룰 수 있는 스크립팅 언어이자 프로그래밍 언어
    ? 역할: 웹의 동작을 제어하며 사용자 상호작용을 개선하고, 클라이언트 측과 서버 측 모두에서 실행될 수 있는 다양한 기능을 제공

  ! 자바스크립트의 활용
    1. 웹 클라이언트 애플리케이션 개발 (프론트엔드)
      사용자가 웹 요소를 제어하는 웹 사이트의 User Interface 부분에 활용 가능

      User Interface: 메뉴, 텍스트, 팝업 등
        사용자가 사이틀르 편리하게 사용할 수 있도록 하는 모든 디자인 요소
      
      웹 애플리케이션: 다양한 기능을 가진 웹 페이지
        ex. 별도의 설치 없이 웹 브라우저 만으로도 해당 애플리케이션 기능 사용 가능한 웹

      ? 사용자 인터페이스의 동적 요소(메뉴, 팝업, 폼 등) 관리
      ? 사용자 경험을 향상시키고, 반응형 웹 디자인을 가능하게 함
      ? 예: 실시간 데이터 업데이트, 인터랙티브 맵, 비디오 플레이어

    2. 웹 서버 애플리케이션 개발 (백엔드)
      Node.js 개발로 자바스크립트로도 웹 서버 애플리케이션 개발 가능

      ? 데이터베이스 관리, 사용자 인증, 서버 로직 처리

    3. 모바일 애플리케이션 개발
      안드로이드 - 자바, 코틀린
      아이폰 - 스위프트
      
      리액트: '페이스북'에서 자바스크립트로 '모든 모바일 운영체제에서 사용 가능한' 리액트 네이티브 개발

      ? 리액트 네이티브를 사용하여 iOS 및 Android 플랫폼 모두에서 작동하는 앱 개발
      ? 하나의 코드베이스로 여러 플랫폼에서 동작하는 앱 생성

  ! 자바스크립트의 버전
    ? 자바스크립트의 표준 버전: ECMAScript
      - 자바스크립트의 신규 기능과 문법 표준을 정의
    
      ECMAScript 1 (ES1) - 1997년
      : 자바스크립트의 첫 번째 공식 버전
      : 기본 문법과 기능을 포함
    
      ECMAScript 3 (ES3) - 1999년
      : 정규 표현식, try/catch 예외 처리 등 추가

      ECMAScript 5 (ES5) - 2009년
      : ‘strict mode’ 추가, JSON 지원, Object, Array 메소드 확장

      ECMAScript 2015 (ES6)
      : 클래스, 모듈, 화살표 함수, 템플릿 문자열, let/const 변수 선언 등 현대 자바스크립트의 많은 중요 기능이 도입
      : 이후의 버전부터는 매년 새로운 기능이 추가되는 형식으로 변경됨

  ! 자바스크립트의 특징
    1. 동적 언어
      : JS가 실행되는 시점에서 해석되는 언어
      - 이는 변수의 타입이 선언이 아닌 실행 시점에서 결정된다는 것을 의미

    2. 객체 기반
      : 객체를 사용하여 데이터와 함수를 묶을 수 있는 언어
      - 데이터(속성)와 행동(메소드)을 객체로 묶어 관리
      
    3. 이벤트 기반
      : 이벤트 기반 프로그래밍을 지원
        사용자의 행동(클릭, 키보드 입력, 마우스 이동 등)에 따라
        코드가 실행되는 방식

  ! 자바스크립트의 주요 기능
    '이론, 읽어보면 좋은 배경 지식'

    - DOM 조작: 문서 객체 모델(DOM)을 사용하여 HTML 및 CSS를 동적으로 조작 가능
    - 비동기 처리: AJAX, Fetch API 등을 이용하여 비동기적으로 서버와 통신하고 데이터를 처리
    - 프레임워크 및 라이브러리: Angular, React, Vue.js 등 
                                다양한 자바스크립트 기반 프레임워크를 통해 복잡한 애플리케이션 개발 지원
*/

// 현재 웹 페이지에서 첫 번째 button 태그를 찾아서 저장
// 같다: ==
// 우항의 값을 좌항에 넣는다: =
const button = document.querySelector('button');

// addEventListener 메소드를 사용하여
// button 요소에 클릭 에빈트 리스너 추가
button.addEventListener('click', updateName);

function updateName() {
  const name = prompt('Enter a new name');
  button.textContent = `Player 1: ${name}`;
}